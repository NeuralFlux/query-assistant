<|start_header_id|>system<|end_header_id|>\n\nYou are an expert in computational biology. Read the following documentation for further use.\n\nGene query service\n\nThis page describes the reference for MyGene.info gene query web service. It’s also recommended to try it live on our interactive API page.\nService endpoint\n\nhttp://mygene.info/v3/query\n\nGET request\nQuery parameters\nq\n\n    Required, passing user query. The detailed query syntax for parameter “q” we explained below.\n\nfields\n\n    Optional, can be a comma-separated fields to limit the fields returned from the matching gene hits. The supported field names can be found from any gene object (e.g. gene 1017). Note that it supports dot notation as well, e.g., you can pass “refseq.rna”. If “fields=all”, all available fields will be returned. Default: “symbol,name,taxid,entrezgene”.\n\nspecies\n\n    Optional, can be used to limit the gene hits from given species. You can use “common names” for nine common species (human, mouse, rat, fruitfly, nematode, zebrafish, thale-cress, frog and pig). All other species, you can provide their taxonomy ids. See more details here. Multiple species can be passed using comma as a separator. Passing “all” will query against all available species. Default: all.\n\nsize\n\n    Optional, the maximum number of matching gene hits to return (with a cap of 1000 at the moment). Default: 10.\n\nfrom\n\n    Optional, the number of matching gene hits to skip, starting from 0. Default: 0\n\nHint\n\nThe combination of “size” and “from” parameters can be used to get paging for large query:\n\nq=cdk*&size=50                     first 50 hits\nq=cdk*&size=50&from=50             the next 50 hits\n\nfetch_all\n\n    Optional, a boolean, which when TRUE, allows fast retrieval of all unsorted query hits. The return object contains a _scroll_id field, which when passed as a parameter to the query endpoint, returns the next 1000 query results. Setting fetch_all = TRUE causes the results to be inherently unsorted, therefore the sort parameter is ignored. For more information see examples using fetch_all here. Default: FALSE.\n\nscroll_id\n\n    Optional, a string containing the _scroll_id returned from a query request with fetch_all = TRUE. Supplying a valid scroll_id will return the next 1000 unordered results. If the next results are not obtained within 1 minute of the previous set of results, the scroll_id becomes stale, and a new one must be obtained with another query request with fetch_all = TRUE. All other parameters are ignored when the scroll_id parameter is supplied. For more information see examples using scroll_id here.\n\nsort\n\n    Optional, the comma-separated fields to sort on. Prefix with “-” for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.\n\nfacets\n\n    Optional, a single field or comma-separated fields to return facets, for example, “facets=taxid”, “facets=taxid,type_of_gene”. See examples of faceted queries here.\n\nfacet_size\n\n    Optional, an integer (1 <= facet_size <= 1000) that specifies how many buckets to ret\n\nurn in a faceted query.\nspecies_facet_filter\n\n    Optional, relevant when faceting on species (i.e., “facets=taxid” are passed). It’s used to pass species filter without changing the scope of faceting, so that the returned facet counts won’t change. Either species name or taxonomy id can be used, just like “species” parameter above. See examples of faceted queries here.\n\nentrezonly\n\n    Optional, when passed as “true” or “1”, the query returns only the hits with valid Entrez gene ids. Default: false.\n\nensemblonly\n\n    Optional, when passed as “true” or “1”, the query returns only the hits with valid Ensembl gene ids. Default: false.\n\ncallback\n\n    Optional, you can pass a “callback” parameter to make a JSONP call.\n\ndotfield\n\n    Optional, can be used to control the format of the returned gene object. If “dotfield” is true, the returned data object is returned flattened (no nested objects) using dotfield notation for key names. Default: false.\n\nfilter\n\n    Alias for “fields” parameter.\n\nlimit\n\n    Alias for “size” parameter.\n\nskip\n\n    Alias for “from” parameter.\n\nemail\n\n    Optional, if you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.\n\nQuery syntax\n\nExamples of query parameter “q”:\nSimple queries\n\nsearch for everything:\n\nq=cdk2                              search for any fields\nq=tumor suppressor                  default as "AND" for all query terms\nq="cyclin-dependent kinase"         search for the phrase\n\nFielded queries\n\nq=entrezgene:1017\nq=symbol:cdk2\nq=refseq:NM_001798\n\nAvailable fields\n\nThis table lists some commonly used fields can be used for “fielded queries”. Check here for the complete list of available fields.\nField 	Description 	Examples\nentrezgene 	Entrez gene id 	q=entrezgene:1017\nensembl.gene 	Ensembl gene id 	q=ensembl.gene:ENSG00000123374\nsymbol 	official gene symbol 	q=symbol:cdk2\nname 	gene name 	q=name:cyclin-dependent\nalias 	gene alias 	q=alias:p33\nsummary 	gene summary text 	q=summary:insulin\nrefseq 	NCBI RefSeq id (both rna and proteins) 	q=refseq:NM_001798; q=refseq:NP_439892\nunigene 	NCBI UniGene id 	q=unigene:Hs.19192\nhomologene 	NCBI HomoloGene id 	q=homologene:74409\naccession 	NCBI GeneBank Accession number 	q=accession:AA810989\nensembl.transcript 	Ensembl transcript id 	q=ensembl.transcript:ENST00000266970\nensembl.protein 	Ensembl protein id 	q=ensembl.protein:ENSP00000243067\nuniprot 	UniProt id 	q=uniprot:P24941\nipi (deprecated!) 	IPI id 	q=ipi:IPI00031681\npdb 	PDB id 	q=pdb:1AQ1\nprosite 	Prosite id 	q=prosite:PS50011\npfam 	PFam id 	q=pfam:PF00069\ninterpro 	InterPro id 	q=interpro:IPR008351\nmim 	OMIM id 	q=mim:116953\npharmgkb 	PharmGKB id 	q=pharmgkb:PA101\nreporter 	Affymetrix probeset id 	q=reporter:204252_at\nreagent 	GNF reagent id 	q=reagent:GNF282834\ngo 	Gene Ontology id 	q=go:0000307\nhgnc 	HUGO Gene Nomenclature Committee 	q=hgnc:1771\nhprd 	Human Protein Reference Database 	q=hprd:00310\nmgi 	Mouse Genome Informatics 	q=mgi:MGI\:88339\nrgd 	Rat Genome Database 	q=rgd:620620\nflybase 	A Database of Drosophila Genes & Genomes 	q=flybase:FBgn0004107&species=fruitfly\nwormbase 	C elegans and related nematodes database 	q=wormbase:WBGene00057218&species=31234\nzfin 	Zebrafish Information Network 	q=zfin:ZDB-GENE-980526-104&species=zebrafish\ntair 	Arabidopsis Information Resource 	q=tair:AT3G48750&species=thale-cress\nxenbase 	Xenopus laevis and Xenopus tropicalis; biology and genomics resource; q=xenbase:XB-GENE-1001990&species=frog\nmirbase 	database of published miRNA; sequences and annotation;	q=mirbase:MI0017267\nretired 	Retired Entrez gene id, including those with replaced gene ids.	q=retired:84999\n\nGenome interval query\nWhen we detect your query (”q” parameter) contains a genome interval pattern like this one:\n\nchrX:151,073,054-151,383,976\n\nwe will do the genome interval query for you. Besides above interval string, you also need to specify “species” parameter (with the default as human). These are all acceptted queries:\n\nq=chrX:151073054-151383976&species:9606\nq=chrX:151,073,054-151,383,976&species:human\n\nHint\n\nAs you can see above, the genomic locations can include commas in it.\n\nSee also\n\nGenome assembly information\nWildcard queries\n\nWildcard character “*” or “?” is supported in either simple queries or fielded queries:\n\nq=CDK?                              single character wildcard\nq=symbol:CDK?                       single character wildcard within "symbol" field\nq=IL*R                              multiple character wildcard\n\nNote\n\nWildcard character can not be the first character. It will be ignored.\nBoolean operators and grouping\n\nYou can use AND/OR/NOT boolean operators and grouping to form complicated queries:\n\nq=tumor AND suppressor                        AND operator\nq=CDK2 OR BTK                                 OR operator\nq="tumor suppressor" NOT receptor             NOT operator\nq=(interleukin OR insulin) AND receptor       the use of parentheses\n\nReturned object\n\nA GET request like this:\n\nhttp://mygene.info/v3/query?q=symbol:cdk2\n\nshould return hits as:\n\n{\n  "hits": [\n    {\n      "name": "cyclin-dependent kinase 2",\n      "_score": 87.76775,\n      "symbol": "CDK2",\n      "taxid": 9606,\n      "entrezgene": 1017,\n      "_id": "1017"\n    },\n    {\n      "name": "cyclin-dependent kinase 2",\n      "_score": 79.480484,\n      "symbol": "Cdk2",\n      "taxid": 10090,\n      "entrezgene": 12566,\n      "_id": "12566"\n    },\n    {\n      "name": "cyclin dependent kinase 2",\n      "_score": 62.286797,\n      "symbol": "Cdk2",\n      "taxid": 10116,\n      "entrezgene": 362817,\n      "_id": "362817"\n    }\n  ],\n  "total": 3,\n  "max_score": 87.76775,\n  "took": 4\n}\n\n<|eot_id|><|start_header_id|>user<|end_header_id|>\n\nAccording to the documentation, describe the following API call in 1 sentence only. "/v3/query/?fields=name,symbol,summary&q=H2BC11/17/21/3+AND+organism:human"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n